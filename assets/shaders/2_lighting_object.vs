#version 330 core 
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out vec3 normal;
out vec3 fragPos;

void main()
{
    // normal direction
    // Note: Whenever an non-uniform scale is applied to a normal vector the resulting vector is 
    // no longer perpendicular to the corresponding surface. This distorts the lighting.
    // The normal matrix removes the effect of wrongly scaling the normal vector. 
    // Read this article to learn more about the normal matrix (http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/)
    // Normal matrix generated by using the inverse and transpose function and 
    // then casting to a mat3 to ensure the translation properties are lost. 
    // The resulting mat3 can be multiplied with a vec3 normal vector.
    mat3 normalMat = mat3(transpose(inverse(model)));
    normal = normalMat * aNormal;
    
    // fragment position
    fragPos = (model * vec4(aPos, 1.0)).xyz;

    gl_Position = projection * view * model * vec4(aPos, 1.0);
}